Net: ctrl_stage_exceptions
High-Level Event: Exception handling during instruction execution.
High-Level Summary: The ctrl_stage_exceptions signal is associated with the handling of exceptions that occur during the execution of instructions. This signal is influenced by the execution of instructions that trigger exceptions, such as alignment errors, bus errors, range errors, and page faults. The types of instructions that influence this signal can be grouped into categories such as:
* Load and store instructions that access misaligned or invalid memory addresses
* Instructions that trigger bus errors, such as division by zero or invalid memory access
* Instructions that exceed the valid range of values, such as overflow or underflow
* Instructions that access pages that are not mapped or are protected
* Instructions that trigger other types of exceptions, such as interrupts or traps
* Instructions that update flags based on operation results, such as:
  + Equality checks (e.g., equal, not equal)
  + Ordering comparisons (e.g., less than, greater than)
  + Signed and unsigned comparisons
  + Arithmetic operations that set flags (e.g., carry, overflow)

Net: ctrl_valid_i
High-Level Event: Instruction execution triggers control flow validation.
High-Level Summary: The ctrl_valid_i signal is associated with the validation of control flow during the execution of specific instructions. This signal is influenced by the execution of instructions that perform load and store operations, and is connected to architectural behaviors like memory access, exception handling, and pipeline control. The types of instructions that influence this signal can be grouped into categories such as:
* Load instructions (e.g., lw, lb, lh)
* Store instructions (e.g., sw, sb, sh)
* Instructions that access memory (e.g., load linked, store conditional)
* Instructions that handle exceptions (e.g., page faults, alignment exceptions)
* Instructions that control pipeline flow (e.g., branches, jumps)
* Instructions that update flags based on operation results, such as:
  + Load and store operations that set flags (e.g., page fault, alignment exception)
  + Memory access instructions that update flags (e.g., load linked, store conditional)

Net: dcache_hit_i
High-Level Event: Instruction execution triggers data cache hit detection.
High-Level Summary: The dcache_hit_i signal is associated with the detection of data cache hits during the execution of instructions that access memory. This signal is influenced by the execution of instructions that perform load and store operations, and is connected to architectural behaviors like memory access, data caching, and instruction-level parallelism. The types of instructions that influence this signal can be grouped into categories such as:
* Load instructions (e.g., loading data from memory into registers)
* Store instructions (e.g., storing data from registers into memory)
* Instructions that access memory-mapped I/O devices
* Instructions that update cache coherence (e.g., cache flush, cache invalidate)
* Instructions that rely on data cache for performance optimization, such as:
  + Sequential load and store operations
  + Instruction prefetching
  + Data prefetching
  + Cache-friendly data access patterns

Net: dchache_miss
High-Level Event: Cache miss detection during load and store operations.
High-Level Summary: The dchache_miss signal is associated with the detection of cache misses during the execution of load and store instructions. This signal is influenced by the execution of instructions that access memory, and is connected to architectural behaviors like cache management, memory access, and data transfer. The types of instructions that influence this signal can be grouped into categories such as:
* Load instructions (e.g., load word, load byte)
* Store instructions (e.g., store word, store byte)
* Instructions that access memory with potential cache misses (e.g., load linked, store conditional)
* Instructions that update cache coherence and consistency, such as:
  + Cache maintenance operations (e.g., cache flush, cache invalidate)
  + Memory barrier instructions (e.g., fence, sync)
  + Atomic operations that access memory (e.g., atomic add, atomic swap)

Net: deassert_decode_execute_halt
High-Level Event: Instruction execution triggers decode and execute halt deassertion.
High-Level Summary: The deassert_decode_execute_halt signal is associated with the deassertion of the decode and execute halt during the execution of specific instructions. This signal is influenced by the execution of instructions that perform control-flow changes, exception handling, or restart operations, and is connected to architectural behaviors like pipeline flushing, instruction retry, and exception handling. The types of instructions that influence this signal can be grouped into categories such as:
* Control-flow instructions (e.g., branches, jumps)
* Exception-handling instructions (e.g., trap, interrupt)
* Restart instructions (e.g., restart from stall, flush pipeline)
* Instructions that update the program counter or instruction pointer
* Instructions that affect the pipeline's execution flow, such as:
  + Branch prediction updates
  + Misprediction recovery
  + Pipeline flushes
  + Instruction retries
  + Exception handling and recovery

Net: deassert_doing_rfe
High-Level Event: Instruction execution triggers return from exception handling.
High-Level Summary: The deassert_doing_rfe signal is associated with the handling of exceptions and the return from exception handling routines. This signal is influenced by the execution of instructions that trigger exceptions, and is connected to architectural behaviors like exception handling, return from exception, and instruction decoding. The types of instructions that influence this signal can be grouped into categories such as:
* Exception-generating instructions (e.g., divide by zero, page fault)
* Branch instructions that trigger exceptions (e.g., invalid opcode, misaligned address)
* Instructions that handle exceptions (e.g., return from exception, exception handling routines)
* Instructions that decode and execute exception-related operations (e.g., saving and restoring context)
* Control-flow instructions that influence exception handling, such as:
  + Return from exception instructions
  + Exception handling routines
  + Branch instructions that redirect control flow during exception handling
  + Instructions that update the program counter during exception handling

Net: decode_branch_i
High-Level Event: Instruction execution triggers branch decoding.
High-Level Summary: The decode_branch_i signal is associated with the decoding of branch instructions during the execution of specific instructions. This signal is influenced by the execution of instructions that perform control-flow changes, and is connected to architectural behaviors like branch prediction, conditional branching, and instruction decoding. The types of instructions that influence this signal can be grouped into categories such as:
* Branch instructions (e.g., jump, call, return)
* Conditional branch instructions (e.g., if-else statements)
* Indirect branch instructions (e.g., jump to a register)
* Instructions that update the program counter (e.g., relative jumps)
* Instructions that perform control-flow changes based on conditions, such as:
  + Equality checks (e.g., equal, not equal)
  + Ordering comparisons (e.g., less than, greater than)
  + Conditional moves or loads
  + Loop control instructions (e.g., loop, repeat)

Net: decode_branch_target_i
High-Level Event: Instruction execution triggers branch target calculation.
High-Level Summary: The decode_branch_target_i signal is associated with the calculation of branch targets during the execution of specific instructions. This signal is influenced by the execution of instructions that perform control flow changes, such as branches and jumps, and is connected to architectural behaviors like branch prediction, misprediction handling, and instruction sequencing. The types of instructions that influence this signal can be grouped into categories such as:
* Branch instructions (e.g., beq, bne, blt)
* Jump instructions (e.g., jal, jr)
* Control flow instructions (e.g., conditional moves, loop control)
* Instructions that update the program counter (e.g., return from interrupt, exception handling)
* Instructions that perform indirect jumps or calls (e.g., jalr, call)
* Instructions that require branch prediction or speculation (e.g., conditional branches, loops)

Net: decode_bubble_i
High-Level Event: Instruction execution triggers decode bubble insertion.
High-Level Summary: The decode_bubble_i signal is associated with the insertion of decode bubbles during the execution of specific instructions. This signal is influenced by the execution of instructions that perform load, store, multiplication, and other operations, and is connected to architectural behaviors like instruction decoding, execution, and memory access. The types of instructions that influence this signal can be grouped into categories such as:
* Load instructions (e.g., load word, load byte)
* Store instructions (e.g., store word, store byte)
* Multiplication instructions (e.g., multiply, multiply-accumulate)
* Instructions that access memory (e.g., load linked, store conditional)
* Instructions that have interlocks or dependencies (e.g., instructions that use the result of a previous instruction)
* Instructions that update registers or flags (e.g., add, subtract, compare)
* Instructions that cause pipeline flushes or stalls (e.g., branch instructions, exceptions)

Net: decode_execute_halt
High-Level Event: Instruction execution triggers decode and execute stage halt.
High-Level Summary: The decode_execute_halt signal is associated with the halting of instruction execution during the decode and execute stages. This signal is influenced by the execution of instructions that trigger exceptional conditions, such as interrupts, faults, or traps, and is connected to architectural behaviors like exception handling, pipeline flushing, and instruction replay. The types of instructions that influence this signal can be grouped into categories such as:
* Exception-generating instructions (e.g., divide by zero, page faults)
* Interrupt-handling instructions (e.g., system calls, interrupt acknowledges)
* Trap-generating instructions (e.g., undefined instructions, privilege violations)
* Instructions that trigger pipeline flushes (e.g., mispredicted branches, self-modifying code)
* Instructions that require instruction replay (e.g., instructions that trigger exceptions during execution)

Net: decode_valid_i
High-Level Event: Instruction decode triggers execution.
High-Level Summary: The decode_valid_i signal is associated with the validation of instruction decoding. This signal is influenced by the execution of instructions that require decoding, and is connected to architectural behaviors like instruction fetching, decoding, and execution. The types of instructions that influence this signal can be grouped into categories such as:
* Arithmetic instructions (e.g., add, subtract)
* Logical instructions (e.g., AND, OR, XOR)
* Load and store instructions (e.g., load, store)
* Control flow instructions (e.g., branch, jump)
* Instructions that update registers or memory based on operation results.

Net: doing_rfe
High-Level Event: Instruction execution triggers return from exception handling.
High-Level Summary: The doing_rfe signal is associated with the execution of instructions that handle return from exceptions. This signal is influenced by the execution of instructions that perform exception handling, such as return from interrupt (RFI) or return from exception (RFE) instructions. The types of instructions that influence this signal can be grouped into categories such as:
* Exception handling instructions (e.g., RFE, RFI)
* Instructions that update the program counter (PC) register
* Instructions that manipulate the processor's exception handling state
* Instructions that perform exception handling and recovery, such as:
  + Return from interrupt instructions
  + Return from exception instructions
  + Instructions that restore the processor's state after an exception
  + Instructions that handle exception-related data transfers and memory accesses

Net: doing_rfe_o
High-Level Event: Instruction execution triggers return from exception handling.
High-Level Summary: The doing_rfe_o signal is associated with the execution of return-from-exception (RFE) instructions, which handle the return from exception handling. This signal is influenced by the execution of instructions that perform exception handling, and is connected to architectural behaviors like exception handling, return from exception, and instruction execution. The types of instructions that influence this signal can be grouped into categories such as:
* Exception handling instructions (e.g., RFE)
* Instructions that trigger exceptions (e.g., invalid instructions, division by zero)
* Instructions that update the program counter (e.g., jumps, branches)
* Instructions that handle interrupts and exceptions (e.g., interrupt handlers, exception handlers)
* Instructions that update the processor state (e.g., setting/clearing flags, updating registers)

Net: doing_rfe_r
High-Level Event: Instruction execution triggers register file enable.
High-Level Summary: The doing_rfe_r signal is associated with the enabling of the register file during the execution of specific instructions. This signal is influenced by the execution of instructions that require access to the register file, and is connected to architectural behaviors like register file operations, instruction decoding, and execution stage control. The types of instructions that influence this signal can be grouped into categories such as:
* Load and store instructions that access the register file
* Arithmetic and logical instructions that use register operands
* Instructions that update register values, such as:
  + Register-register arithmetic operations (e.g., add, subtract)
  + Register-immediate arithmetic operations (e.g., addi, subi)
  + Load instructions that load data into registers (e.g., lw, lh)
  + Store instructions that store data from registers (e.g., sw, sh)
* Instructions that require register file access for operand fetching or result storing, such as:
  + Instruction fetch and decode operations
  + Execution stage operations that use register file contents

Net: except_align_i
High-Level Event: Exception handling due to alignment issues during load/store operations.
High-Level Summary: The except_align_i signal is associated with the handling of alignment exceptions that occur during load and store operations. This signal is influenced by the execution of instructions that access memory, and is connected to architectural behaviors like exception handling, memory management, and data alignment. The types of instructions that influence this signal can be grouped into categories such as:
* Load instructions (e.g., load word, load byte)
* Store instructions (e.g., store word, store byte)
* Atomic instructions that access memory (e.g., atomic add, atomic swap)
* Instructions that perform unaligned memory accesses (e.g., loading a word from an odd address)
* Instructions that update memory management registers (e.g., setting page tables, updating memory protection)

Net: except_dbus_i
High-Level Event: Exception handling during instruction execution.
High-Level Summary: The except_dbus_i signal is associated with exception handling during the execution of instructions. This signal is influenced by the execution of instructions that access memory, perform load and store operations, and is connected to architectural behaviors like exception handling, memory access, and error detection. The types of instructions that influence this signal can be grouped into categories such as:
* Load and store instructions (e.g., lw, sw)
* Memory access instructions (e.g., load linked, store conditional)
* Instructions that perform input/output operations
* Exception-generating instructions (e.g., divide by zero, page faults)
* Error-detecting instructions (e.g., checksum verification, parity check)
* Instructions that update status registers based on exception occurrence, such as:
  + Memory access errors (e.g., page faults, bus errors)
  + Arithmetic errors (e.g., overflow, underflow)
  + Instruction decoding errors (e.g., illegal instruction, undefined instruction)

Net: except_dpagefault_i
High-Level Event: Exception handling due to page faults.
High-Level Summary: The except_dpagefault_i signal is associated with the handling of exceptions caused by page faults during instruction execution. This signal is influenced by the execution of instructions that access memory, and is connected to architectural behaviors like exception handling, page table walks, and memory management. The types of instructions that influence this signal can be grouped into categories such as:
* Memory access instructions (e.g., load, store)
* Instructions that may cause page faults (e.g., instruction fetch, data access)
* Exception-handling instructions (e.g., trap, interrupt)
* Instructions that update page tables or memory management registers
* Instructions that perform virtual-to-physical address translations, such as:
  + Load and store operations that access virtual memory
  + Instruction fetch operations that access virtual memory
  + Page table update operations
  + Memory management operations that handle page faults and exceptions

Net: except_dtlb_miss_i
High-Level Event: Instruction execution triggers data translation lookaside buffer (DTLB) miss exception handling.
High-Level Summary: The except_dtlb_miss_i signal is associated with the handling of DTLB miss exceptions during the execution of instructions that access memory. This signal is influenced by the execution of instructions that perform memory operations, and is connected to architectural behaviors like exception handling, memory management, and cache control. The types of instructions that influence this signal can be grouped into categories such as:
* Memory access instructions (e.g., load, store)
* Instructions that access virtual memory addresses
* Instructions that trigger DTLB misses due to page faults or invalid memory accesses
* Exception-generating instructions (e.g., divide by zero, invalid opcode)
* Instructions that update memory management registers or page tables.

Net: except_ibus_align_i
High-Level Event: Instruction execution triggers instruction bus alignment exception.
High-Level Summary: The except_ibus_align_i signal is associated with the detection of instruction bus alignment exceptions during the execution of specific instructions. This signal is influenced by the execution of instructions that access misaligned instruction addresses, and is connected to architectural behaviors like instruction fetching, decoding, and execution. The types of instructions that influence this signal can be grouped into categories such as:
* Branch instructions (e.g., jump, call, return)
* Control-flow instructions (e.g., conditional branches)
* Instructions that access instruction memory (e.g., instruction fetches)
* Load and store instructions that access misaligned addresses
* Instructions that update the program counter (e.g., PC-relative addressing) 
* Instructions that perform indirect jumps or calls
* Instructions that use relative addressing modes (e.g., PC-relative, register-relative)

Net: except_ibus_err_i
High-Level Event: Instruction fetch error detection.
High-Level Summary: The except_ibus_err_i signal is associated with the detection of errors during instruction fetch, such as invalid or inaccessible memory locations. This signal is influenced by the execution of instructions that access memory, and is connected to architectural behaviors like exception handling, error detection, and instruction fetch. The types of instructions that influence this signal can be grouped into categories such as:
* Instruction fetch operations
* Memory access instructions (e.g., load, store)
* Instructions that access external memory or I/O devices
* Exception-generating instructions (e.g., divide by zero, page faults)
* Instructions that update program counters based on exceptions or errors, such as:
  + Instruction fetch errors
  + Memory access violations
  + Page faults or alignment errors
  + Other exceptions related to instruction fetch or execution

Net: except_illegal_i
High-Level Event: Instruction execution triggers exception due to illegal instruction.
High-Level Summary: The except_illegal_i signal is associated with the handling of illegal or undefined instructions during execution. This signal is influenced by the execution of instructions that are not supported by the processor, and is connected to architectural behaviors like exception handling, instruction decoding, and control flow management. The types of instructions that influence this signal can be grouped into categories such as:
* Undefined or unsupported instructions
* Instructions with invalid or reserved opcodes
* Instructions that violate architectural constraints or rules
* Instructions that require privileges or permissions not available in the current execution mode
* Instructions that trigger exceptions due to external factors, such as:
  + Invalid or unaligned memory accesses
  + Divide-by-zero or overflow conditions
  + Privilege violations or security exceptions
  + Interrupts or traps generated by external events
  + Instruction-specific exceptions, such as:
    - Invalid instruction syntax or format
    - Unsupported instruction extensions or features
    - Instructions that are not implemented or are reserved for future use

